**data/cars.json**

[
  {
    "id": "6e2bc663-5197-441a-957b-bc75e4a2da7c",
    "plate": "DBH-3491",
    "manufacture": "Ford",
    "model": "F150",
    "image": "./images/car01.min.jpg",
    "rentPerDay": 200000,
    "capacity": 2,
    "description": " Brake assist. Leather-wrapped shift knob. Glove box lamp. Air conditioning w/in-cabin microfilter.",
    "availableAt": "2022-03-23T15:49:05.563Z",
    "transmission": "Automatic",
    "available": true,
    "type": "Sedan",
    "year": 2022,
    "options": [
      "Cruise Control",
      "Tinted Glass",
      "Tinted Glass",
      "Tinted Glass",
      "AM/FM Stereo"
    ],
    "specs": [
      "Brake assist",
      "Leather-wrapped shift knob",
      "Glove box lamp",
      "Air conditioning w/in-cabin microfilter",
      "Body color folding remote-controlled pwr mirrors",
      "Dual-stage front airbags w/occupant classification system"
    ]
  },
]

**src/controllers/cars.js**

const carService = require("../service/cars");
const { successResponse } = require("../utils/response");

exports.getCars = (req, res, next) => {
    // Call the usecase or service
    const data = carService.getCars(
        req.query?.manufacture,
        req.query?.model
    );
    successResponse(res, data);
};

exports.getCarById = (req, res, next) => {
    // Get the id from params
    const { id } = req.params;

    // Get car by id
    const data = carService.getCarById(id);
    successResponse(res, data);
};

exports.createCar = async (req, res, next) => {
    // Create the new car
    const data = await carService.createCar(req.body, req.files);
    successResponse(res, data);
};

exports.updateCar = async (req, res, next) => {
    // Get the id from params
    const { id } = req.params;
    const data = await carService.updateCar(id, req.body, req.files);
    successResponse(res, data);
};

exports.deleteCarById = (req, res, next) => {
    // Get the id from params
    const { id } = req.params;
    const data = carService.deleteCarById(id);
    successResponse(res, data);
};

**src/middlewares/cars.js**

const { z } = require("zod");
const { BadRequestError } = require("../utils/request");

exports.validateGetCars = (req, res, next) => {
    // Validate the query
    const validateQuery = z.object({
        manufacture: z.string().optional(),
        model: z.string().optional(),
    });

    const resultValidateQuery = validateQuery.safeParse(req.query);
    if (!resultValidateQuery.success) {
        // If validation fails, return error messages
        throw new BadRequestError(resultValidateQuery.error.errors);
    }

    next();
};

exports.validateGetCarById = (req, res, next) => {
    // Make a validation schema
    const validateParams = z.object({
        id: z.string(),
    });

    const result = validateParams.safeParse(req.params);
    if (!result.success) {
        // If validation fails, return error messages
        throw new BadRequestError(result.error.errors);
    }

    next();
};

exports.validateCreateCar = (req, res, next) => {
    // Convert to car data format
    req.body = {
        ...req.body,
        rentPerDay: Number(req.body.rentPerDay),   // Convert rentPerDay to number
        capacity: Number(req.body.capacity),       // Convert capacity to number
        year: Number(req.body.year),               // Convert year to number
        available: req.body.available === 'true',  // Convert available to boolean
        options: Array.isArray(req.body.options) ? req.body.options : [req.body.options], // Convert options to array
        specs: Array.isArray(req.body.specs) ? req.body.specs : [req.body.specs],
    };

    // Validation body schema
    const validateBody = z.object({
        plate: z.string(),
        manufacture: z.string(),
        model: z.string(),
        rentPerDay: z.number(),
        capacity: z.number(),
        description: z.string(),
        availableAt: z.string(),
        transmission: z.string(),
        available: z.boolean(),
        type: z.string(),
        year: z.number(),
        options: z.array(z.string()),
        specs: z.array(z.string()),
    });

    // The file is not required
    const validateFileBody = z
        .object({
            carsImage: z
                .object({
                    name: z.string(),
                    data: z.any(),
                })
                .nullable()
                .optional(),
        })
        .nullable()
        .optional();

    // Validate
    const result = validateBody.safeParse(req.body);
    if (!result.success) {
        // If validation fails, return error messages
        throw new BadRequestError(result.error.errors);
    }

    // Validate
    const resultValidateFiles = validateFileBody.safeParse(req.files);
    if (!resultValidateFiles.success) {
        // If validation fails, return error messages
        throw new BadRequestError(resultValidateFiles.error.errors);
    }

    next();
};

exports.validateUpdateCar = (req, res, next) => {
    // Validate parameters
    const validateParams = z.object({
        id: z.string().uuid("Invalid ID format"), // Validate that the ID is a valid UUID
    });

    const resultValidateParams = validateParams.safeParse(req.params);
    if (!resultValidateParams.success) {
        // If validation fails, return error messages
        throw new BadRequestError(resultValidateParams.error.errors);
    }

    
    req.body = {
        ...req.body,
        rentPerDay: Number(req.body.rentPerDay),   // Convert rentPerDay to number
        capacity: Number(req.body.capacity),       // Convert capacity to number
        year: Number(req.body.year),               // Convert year to number
        available: req.body.available === 'true',  // Convert available to boolean
        options: Array.isArray(req.body.options) ? req.body.options : [req.body.options], // Convert options to array
        specs: Array.isArray(req.body.specs) ? req.body.specs : [req.body.specs],
    };
    
    // Validation body schema
    const validateBody = z.object({
        plate: z.string(),
        manufacture: z.string(),
        model: z.string(),
        rentPerDay: z.number(),
        capacity: z.number(),
        description: z.string(),
        availableAt: z.string(),
        transmission: z.string(),
        available: z.boolean(),
        type: z.string(),
        year: z.number(),
        options: z.array(z.string()),
        specs: z.array(z.string()),
    });

    // The file is not required
    const validateFileBody = z
        .object({
            profilePicture: z
                .object({
                    name: z.string(),
                    data: z.any(),
                })
                .nullable()
                .optional(),
        })
        .nullable()
        .optional();

    // Validate request body
    const resultValidateBody = validateBody.safeParse(req.body);
    if (!resultValidateBody.success) {
        // If validation fails, return error messages
        throw new BadRequestError(resultValidateBody.error.errors);
    }

    // Validate
    const resultValidateFiles = validateFileBody.safeParse(req.files);
    if (!resultValidateFiles.success) {
        // If validation fails, return error messages
        throw new BadRequestError(resultValidateFiles.error.errors);
    }

    // Proceed to the next middleware or route handler
    next();
};

exports.validateDeleteCarById = (req, res, next) => {
    // Make a validation schema
    const validateParams = z.object({
        id: z.string(),
    });

    const result = validateParams.safeParse(req.params);
    if (!result.success) {
        // If validation fails, return error messages
        throw new BadRequestError(result.error.errors);
    }

    next();
};

**src/middlewares/errors.js**

const { NotFoundError } = require("../utils/request");

// If there are any error when API Hit, this function will be run
exports.errorHandler = (err, req, res, next) => {
    console.error(err);

    const status = err.status || 500;
    const errors = err.errors || [];
    let message = err.message;
    if (status == 500) {
        message = "Internal Server Error";
    }

    res.status(status).json({
        success: false,
        data: null,
        message,
        errors,
    });
};

// This handler is for 404 not found URL
exports.notFoundURLHandler = (req, res, next) => {
    throw new NotFoundError("URL is Not Found!");
};

**src/repositories/cars.js**

const fs = require("fs");
const cars = require("../../data/cars.json");
const { v4: uuidv4 } = require("uuid");

exports.getCars = (manufacture, model) => {
    const searchedCar = cars.filter((car) => {
        // Do filter logic here
        let result = true;
        if (manufacture) {
            const isFoundManufacture = car.manufacture
                .toLowerCase()
                .includes(manufacture.toLowerCase());
            result = result && isFoundManufacture;
        }
        if (model) {
            const isFoundModel = car.model
                .toLowerCase()
                .includes(model.toLowerCase());
            result = result && isFoundModel;
        }
        return result;
    });
    return searchedCar;
    // return cars;
};

exports.getCarById = (id) => {
    // Find Car by id using strict equality
    const car = cars.find((car) => car.id === id);
    return car || null; // Return null if the car is not found
};

exports.createCar = (data) => {
    // Generate uuid to define the new data id
    const newcar = {
        id: uuidv4(),
        ...data,
    };

    // Add data to current array cars 
    cars.push(newcar);

    // Save the latest data to json
    fs.writeFileSync(
        "./data/cars.json",
        JSON.stringify(cars, null, 4),
        "utf-8"
    );

    return newcar;
};

exports.updateCar = (id, data) => {
    // Find the existing car data
    const car = cars.find((car) => car.id === (id));
    if (!car) {
        // Make a error class
        throw new NotFoundError("Car is Not Found!");
    }

    // Update the data
    Object.assign(car, data);

    // Update the json data
    fs.writeFileSync(
        "./data/cars.json",
        JSON.stringify(cars, null, 4),
        "utf-8"
    );

    return car;
};

exports.deleteCarById = (id) => {
    // Find index
    const carIndex = cars.findIndex((car) => car.id == id);

    if (carIndex < 0) {
        // If no index found
        return null;
    }

    const deletedCar = cars.splice(carIndex, 1);

    // Update the json
    fs.writeFileSync(
        "./data/cars.json",
        JSON.stringify(cars, null, 4),
        "utf-8"
    );
    return deletedCar;
};

**src/routes/cars.js**

const express = require("express");
const {
  validateGetCars,
  validateGetCarById,
  validateDeleteCarById,
  validateCreateCar,
  validateUpdateCar,
} = require("../middlewares/cars");
const {
  getCars,
  getCarById,
  deleteCarById,
  createCar,
  updateCar,
} = require("../controllers/cars");

const router = express.Router();

// It will be run the URL based on path and the method
router
  .route("/")
  .get(validateGetCars, getCars)
  .post(validateCreateCar, createCar);

router 
  .route("/:id")
  .get(validateGetCarById, getCarById)
  .put(validateUpdateCar, updateCar)
  .delete(validateDeleteCarById, deleteCarById);

module.exports = router;

**src/routes/index.js**

const express = require("express");
const carsRouter = require("./cars")

const router = express.Router();

router.use("/cars", carsRouter);
router.get('/', (req, res) => {
  res.send({
    message: "Ping Succesfully!",
  });
});

module.exports = router;

**src/service/cars.js**

const carRepository = require("../repositories/cars");
const { imageUpload } = require("../utils/image-kit");
const { NotFoundError, InternalServerError } = require("../utils/request");

exports.getCars = () => {
    return carRepository.getCars();
};

exports.getCarById = (id) => {
    const car = carRepository.getCarById(id);

    // Check if car is not found
    if (!car) { // This should be negated to throw an error when the car is not found
        throw new NotFoundError("Car is Not Found!");
    }

    return car; // Return the found car
};

exports.createCar = async (data, file) => {
    // Upload file to image kit
    if (file?.carsImage) {
        data.carsImage = await imageUpload(file.carsImage);
    }
    return carRepository.createCar(data);
};

exports.updateCar = async (id, data, file) => {
    // Check if the car exists
    const existingCar = carRepository.getCarById(id);
    if (!existingCar) {
        throw new NotFoundError("Car Not Found!"); // Corrected error message for clarity
    }

    // Replicated existing data with new data
    data = {
        ...existingCar,
        ...data,
    };

    // Upload file to image kit
    if (file?.carsImage) {
        // If a new file is uploaded, update the Image
        data.carsImage = await imageUpload(file.carsImage);
    } else {
        // Keep the existing profile picture
        data.carsImage = existingCar.carsImage;
    }

    // Attempt to update the car data
    const updatedCar = carRepository.updateCar(id, data);
    if (!updatedCar) {
        throw new InternalServerError(["Failed to update car!"]); // Check if the update failed
    }

    // Return the updated car data
    return updatedCar;
};

exports.deleteCarById = (id) => {
    // find car is exist or not
    const existingCar = carRepository.getCarById(id);
    if (!existingCar) {
        throw new NotFoundError("Car is Not Found!");
    }

    // if exist, we will delete the car data
    const deletedCar = carRepository.deleteCarById(id);
    if (!deletedCar) {
        throw new InternalServerError(["Failed to update car!"]);
    }

    return deletedCar;
};

**src/utils/image-kit.js**

const ImageKit = require("imagekit");

// Image kit init
const imagekit = new ImageKit({
    publicKey: process.env.IMAGEKIT_PUBLIC_KEY,
    privateKey: process.env.IMAGEKIT_PRIVATE_KEY,
    urlEndpoint: process.env.IMAGEKIT_URL_ENDPOINT,
});

// Image upload function to imagekit
exports.imageUpload = async (file) => {
    const uploadedFile = await imagekit.upload({
        file: file.data,
        fileName: file.name,
    });
    return uploadedFile?.url;
};

**src/utils/request**

class BadRequestError extends Error {
  constructor(errors) {
      super("Validation failed!");
      this.errors = errors;
      this.status = 400;
  }
}

class NotFoundError extends Error {
  constructor(message) {
      if (message) {
          super(message);
      } else {
          super("Data is Not Found!");
      }
      this.status = 404;
  }
}

class InternalServerError extends Error {
  constructor(errors) {
      super("Internal Server Error");
      this.status = 500;
      this.errors = errors;
  }
}

module.exports = {
  BadRequestError,
  NotFoundError,
  InternalServerError,
};

**src/utils/request.js**

class BadRequestError extends Error {
  constructor(errors) {
      super("Validation failed!");
      this.errors = errors;
      this.status = 400;
  }
}

class NotFoundError extends Error {
  constructor(message) {
      if (message) {
          super(message);
      } else {
          super("Data is Not Found!");
      }
      this.status = 404;
  }
}

class InternalServerError extends Error {
  constructor(errors) {
      super("Internal Server Error");
      this.status = 500;
      this.errors = errors;
  }
}

module.exports = {
  BadRequestError,
  NotFoundError,
  InternalServerError,
};

**src/utils/response.js**

// Standarize response
exports.successResponse = (res, data) => {
  res.status(200).json({
      success: true,
      data,
  });
};

**src/index.js**

const express = require("express"); // Import express with non-module
require("dotenv").config(); // To enable .env called
const fileUpload = require("express-fileupload"); // This package is to enable req.files
require("express-async-errors");
const router = require("./routes");
const { errorHandler, notFoundURLHandler } = require("./middlewares/errors");

/* Make/initiate expess application */
const app = express();
const port = process.env.PORT || 3000;

/* We need to activate body parser/reader */
app.use(express.json());


/* We need to read form-body (body parser/reader) (req.files) if you want upload file */
app.use(
    fileUpload({
        limits: { fileSize: 50 * 1024 * 1024 }, // 50 MB
    })
);

// All routes define here
app.use("/", router);

// This function is for 404 handle URL
app.use("*", notFoundURLHandler);

// This function is to handle error when API hit
app.use(errorHandler);

/* Run the express.js application */
app.listen(port, () => {
    console.log(`The express.js app is runing on port ${port}`);
});

**.env**

IMAGEKIT_PUBLIC_KEY=public_lO6mrCSpaJzKxZR1tiWDZy3TLsg=
IMAGEKIT_PRIVATE_KEY=private_9dwcNDaPWPXJnswgG9QN3V56D6s=
IMAGEKIT_URL_ENDPOINT=https://ik.imagekit.io/zyoyii2tz/

**package.json**

{
  "name": "24001182-km7-nab-bcr-ch3",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "dev": "npx nodemon src/index.js",
    "start": "node src/index.js"
  },
  "keywords": [
    "[]"
  ],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "dotenv": "^16.4.5",
    "express": "^4.21.1",
    "express-async-errors": "^3.1.1",
    "express-fileupload": "^1.5.1",
    "imagekit": "^5.2.0",
    "uuid": "^10.0.0",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "nodemon": "^3.1.7"
  }
}